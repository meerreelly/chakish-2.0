@page "/chat"
@using System.Net.Http.Headers
@using chakish_2._0.models
@using Microsoft.AspNetCore.Http.HttpResults
@using Microsoft.IdentityModel.Tokens
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@rendermode InteractiveServer

<link  rel="stylesheet" href="css/chat.css" />
@if (_user != null)
{
    <div class="chat-container">
        <div class="chat-sidebar">
            <h1 class="logo" @onclick="RedirectToUserInfo">Chakish</h1>
            <div class="search-container">
                <div class="input">
                    <input @bind="_searchTag" @oninput="@(e => FindUser(e.Value.ToString()))" type="text" placeholder="Search or start new chat">
                </div>
            </div>
            
            <div class="contact-list">
                @if (_chats is not null)
                {
                    @foreach (var chat in _chats)
                    {
                        <div class="contact-item" @onclick="() => OpenChat(chat.ChatId)">
                            <img src="@chat.Users.FirstOrDefault(u => u.Id != _user.Id)?.AvatarUrl"/>
                            <span>@chat.Users.FirstOrDefault(u => u.Id != _user.Id)?.Name</span>
                        </div>
                    }
                }
                else if(_searchResult is not null)
                {
                    @foreach (var user in _searchResult)
                    {
                        <div class="contact-item" @onclick="() => CreateChat(user.Id)">
                            <img src="@user?.AvatarUrl"/>
                            <span>@user?.Name</span>
                        </div>
                    }
                }
            </div>
        </div>
        @if (_activeChat != null)
        {
            <div class="chat-main">
                <div class="chat-header">
                    <img src="@UserChatWith?.AvatarUrl"/>
                    <h2>@UserChatWith.Name</h2>
                </div>
                <div class="message-list" @ref="messageList">
                </div>
                <div class="message-input">
                    <input  placeholder="Type a message..." />
                    <button >Send</button>
                </div>
            </div>
        }
    </div>
}

@code
{
    
    /*@foreach (var message in messages)
            {
            <div class="message @(message.IsReceived ? "received" : "sent")">
                <p>@message.Content</p>
                <span class="timestamp">@message.Timestamp.ToString("HH:mm")</span>
            </div>
            }*/
    private string? _searchTag;
    private UserModel? _user = null;
    private List<UserModel>? _searchResult;
    private List<ChatModel>? _chats;
    private ChatModel? _activeChat = null;
    private UserModel? UserChatWith;
    private ElementReference messageList;
    private string ApiUrl;
    
    [Inject]
    private IConfiguration Configuration { get; set; }

    protected override void OnInitialized()
    {
        ApiUrl = Configuration["Api:URL"];
    }

    private async Task FindUser(string SearchTag)
    {
        _chats = null;
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token)&&!SearchTag.IsNullOrEmpty())
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            try
            {
                var encodedSearchTag = Uri.EscapeDataString(SearchTag);
                var response = await Http.GetFromJsonAsync<List<UserModel>>($"{ApiUrl}find-user?serachTag={encodedSearchTag}");
                if (response != null && response.Any())
                {
                    _searchResult = response;
                    StateHasChanged(); 
                }
                else
                {
                    _searchResult = new List<UserModel>();
                    StateHasChanged(); 
                }
            }
            catch (Exception ex)
            {
                _searchResult = new List<UserModel>();
                StateHasChanged(); 
                Console.WriteLine($"Error occurred: {ex.Message}");
            }
        }
        else
        {
            _searchResult = null;
            await GetChatList();
            StateHasChanged(); 
        }
    }

    private void RedirectToUserInfo()
    {
        Navigation.NavigateTo("/userinfo");
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("authToken");
            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                    var response = await Http.GetFromJsonAsync<UserModel>($"{ApiUrl}user-info");
                    if (response != null)
                    {
                        _user = response;
                        await GetChatList();
                        StateHasChanged(); 
                    }
                }
                catch
                {
                    Navigation.NavigateTo("/Error");
                }
            }
            else
            {
                Navigation.NavigateTo("/");
            }
        }
    }

    private async Task CreateChat(Guid userId)
    {
        var encodedSearchTag = Uri.EscapeDataString(userId.ToString());
        try
        {
            var response = await Http.GetFromJsonAsync<ChatModel>($"{ApiUrl}get-chat?userId={encodedSearchTag}");
            if (response != null)
            {
                _activeChat = response;
                UserChatWith = _activeChat.Users.FirstOrDefault(u => u.Id != _user.Id);
            }
            await GetChatList();
            StateHasChanged();

        }
        catch
        {
            Console.WriteLine("error");
        }
    }

    private async Task GetChatList()
    {
        try
        {
            var chats = await Http.GetFromJsonAsync<List<ChatModel>>($"{ApiUrl}get-chat-list");
            if (chats != null)
            {
                _chats = chats;
            }
        }
        catch
        {
            _chats = [];
        }
    }

    private async Task OpenChat(Guid chatId)
    {
        var encodedChatId = Uri.EscapeDataString(chatId.ToString());
        try
        {
            var response = await Http.GetFromJsonAsync<ChatModel>($"{ApiUrl}get-chat?chatId={encodedChatId}");
            if (response != null)
            {
                _activeChat = response;
                UserChatWith = _activeChat.Users.FirstOrDefault(u => u.Id != _user.Id);
            }
            StateHasChanged();

        }
        catch
        {
            Console.WriteLine("error");
        }
    }

    private void RedirectToUser()
    {
        Navigation.NavigateTo($"/UserData/{UserChatWith.Id}");
    }
}
