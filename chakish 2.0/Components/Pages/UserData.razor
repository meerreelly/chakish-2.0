@page "/UserData/{userId}"
@using System.Net.Http.Headers
@using chakish_2._0.Classes
@using chakish_2._0.models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@rendermode InteractiveServer
@inject IFileUploadService FileUploadService

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
<link href="css/userinfo.css" rel="stylesheet" />
<div>
    <ul class="nav-links">
        <li><a href="#">Chakish 2.0</a></li>
        <li class="forward" ><a href="chat" >@_userData?.Name</a></li>
    </ul>
</div>

@if (_userData != null)
{
<div class="main">
    <p> <img src="@( _userData.AvatarUrl=="test"? "http://localhost:5095/photos/user-avatar.svg.png":_userData.AvatarUrl)" alt="Avatar"  /></p>
    <p><strong>Name:</strong> @_userData.Name</p>
    <p><strong>Role:</strong> @_userData.Role</p>
</div>
}
else
{
<p>Loading user information...</p>
}

@code {
    private UserDto? _userData;
    private string ApiUrl;
    [Parameter]
    public string userId { get; set; }

    [Inject]
    private IConfiguration Configuration { get; set; }

    protected override void OnInitialized()
    {
        ApiUrl = Configuration["Api:URL"];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await GetUserInfo();
    }
    
    private async Task GetUserInfo()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var response = await Http.GetFromJsonAsync<UserDto>($"{ApiUrl}get-user-info?userId={userId}");
                if (response != null)
                {
                    _userData = response;
                    StateHasChanged();
                }
            }
            catch
            {
                Navigation.NavigateTo("/Error");
            }
        }
    }

}